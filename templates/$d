<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>UV-WMS Admin WFO Tracker</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #000000;
            min-height: 100vh;
            color: #fff;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 40px;
            background: rgba(255, 255, 255, 0.1);
            padding: 30px;
            border-radius: 20px;
            box-shadow: 0 15px 35px rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .header h1 {
            color: #ffffff;
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 10px;
            background: linear-gradient(45deg, #00f5ff, #ff00ff);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .header p {
            color: #cccccc;
            font-size: 1.1rem;
            margin-bottom: 20px;
        }

        .upload-section {
            background: rgba(255, 255, 255, 0.1);
            padding: 20px;
            border-radius: 15px;
            margin-bottom: 30px;
            box-shadow: 0 10px 30px rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .file-input-wrapper {
            position: relative;
            display: inline-block;
            margin-right: 15px;
        }

        .file-input {
            display: none;
        }

        .file-input-label {
            display: inline-block;
            padding: 10px 20px;
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 400;
            font-size: 0.9rem;
            border: 1px solid rgba(255, 255, 255, 0.3);
        }

        .file-input-label:hover {
            background: rgba(255, 255, 255, 0.3);
            border-color: rgba(255, 255, 255, 0.5);
        }

        .upload-btn {
            display: none;
        }

        .employees-section {
            margin-top: 30px;
        }

        .section-title {
            color: white;
            text-align: center;
            margin-bottom: 25px;
            font-size: 1.8rem;
            text-shadow: 0 2px 4px rgba(0,0,0,0.3);
        }

        .employees-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 25px;
            max-width: 1200px;
            margin: 0 auto;
        }

        .employees-grid.five-employees {
            grid-template-columns: repeat(3, 1fr);
        }

        .employees-grid.five-employees .employee-card:nth-child(4),
        .employees-grid.five-employees .employee-card:nth-child(5) {
            grid-column: span 1;
        }

        .employees-grid.five-employees .employee-card:nth-child(4) {
            grid-column: 1 / 2;
            margin: 0 auto;
        }

        .employees-grid.five-employees .employee-card:nth-child(5) {
            grid-column: 3 / 4;
            margin: 0 auto;
        }

        .employee-card {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 20px;
            padding: 25px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(10px);
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            cursor: pointer;
            position: relative;
            overflow: hidden;
            max-width: 350px;
            width: 100%;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .employee-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(45deg, #00f5ff, #ff00ff);
            transform: scaleX(0);
            transition: transform 0.3s ease;
        }

        .employee-card:hover::before {
            transform: scaleX(1);
        }

        .employee-card:hover {
            transform: translateY(-10px) scale(1.02);
            box-shadow: 0 25px 50px rgba(255, 255, 255, 0.1);
        }

        .employee-card.expanded {
            transform: scale(1.05);
            z-index: 10;
        }

        .employee-header {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
        }

        .employee-avatar {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background: linear-gradient(45deg, #667eea, #764ba2);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.5rem;
            font-weight: bold;
            margin-right: 15px;
            box-shadow: 0 8px 20px rgba(102, 126, 234, 0.3);
        }

        .employee-info h3 {
            color: #ffffff;
            font-size: 1.3rem;
            margin-bottom: 5px;
        }

        .employee-info p {
            color: #cccccc;
            font-size: 0.9rem;
        }

        .status-indicators {
            display: flex;
            gap: 15px;
            margin-bottom: 15px;
        }

        .status-badge {
            flex: 1;
            text-align: center;
            padding: 12px 8px;
            border-radius: 12px;
            font-weight: 600;
            color: white;
            position: relative;
            overflow: hidden;
        }

        .status-badge::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.5s;
        }

        .status-badge:hover::before {
            left: 100%;
        }

        .wfo-badge {
            background: linear-gradient(45deg, #e74c3c, #c0392b);
        }

        .wfh-badge {
            background: linear-gradient(45deg, #3498db, #2980b9);
        }

        .leaves-summary {
            opacity: 0;
            max-height: 0;
            overflow: hidden;
            transition: all 0.4s ease;
            margin-top: 15px;
        }

        .employee-card.expanded .leaves-summary {
            opacity: 1;
            max-height: 300px;
        }

        .leaves-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            margin-top: 15px;
        }

        .leave-item {
            background: rgba(255, 255, 255, 0.1);
            padding: 10px;
            border-radius: 8px;
            text-align: center;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .leave-item .count {
            font-size: 1.5rem;
            font-weight: bold;
            color: #00f5ff;
        }

        .leave-item .label {
            font-size: 0.8rem;
            color: #cccccc;
            margin-top: 2px;
        }

        .loading {
            text-align: center;
            padding: 40px;
            color: white;
        }

        .spinner {
            border: 4px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top: 4px solid white;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .error {
            background: linear-gradient(45deg, #e74c3c, #c0392b);
            color: white;
            padding: 15px;
            border-radius: 10px;
            margin: 20px 0;
            text-align: center;
        }

        .success {
            background: linear-gradient(45deg, #27ae60, #229954);
            color: white;
            padding: 15px;
            border-radius: 10px;
            margin: 20px 0;
            text-align: center;
        }

        /* Monthly Detail View Styles */
        .monthly-detail {
            margin-top: 50px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 20px;
            padding: 30px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .monthly-detail h2 {
            color: #ffffff;
            text-align: center;
            margin-bottom: 30px;
            font-size: 2rem;
            background: linear-gradient(45deg, #00f5ff, #ff00ff);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .attendance-table {
            width: 100%;
            border-collapse: collapse;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 15px;
            overflow: hidden;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .attendance-table th {
            background: rgba(255, 255, 255, 0.1);
            color: #ffffff;
            padding: 15px 10px;
            text-align: center;
            font-weight: 600;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            font-size: 0.9rem;
        }

        .attendance-table td {
            padding: 12px 8px;
            text-align: center;
            border-bottom: 1px solid rgba(255, 255, 255, 0.05);
            font-size: 0.8rem;
            color: #ffffff;
        }

        .attendance-table tr:hover {
            background: rgba(255, 255, 255, 0.05);
        }

        .employee-name-cell {
            text-align: left !important;
            font-weight: 600;
            color: #00f5ff !important;
            padding-left: 15px !important;
        }

        .status-wfo {
            background: linear-gradient(45deg, #e74c3c, #c0392b);
            color: white;
            padding: 4px 8px;
            border-radius: 6px;
            font-weight: 600;
            display: inline-block;
            min-width: 35px;
        }

        .status-wfh {
            background: linear-gradient(45deg, #3498db, #2980b9);
            color: white;
            padding: 4px 8px;
            border-radius: 6px;
            font-weight: 600;
            display: inline-block;
            min-width: 35px;
        }

        .status-sl {
            background: linear-gradient(45deg, #f39c12, #e67e22);
            color: white;
            padding: 4px 8px;
            border-radius: 6px;
            font-weight: 600;
            display: inline-block;
            min-width: 35px;
        }

        .status-pl {
            background: linear-gradient(45deg, #9b59b6, #8e44ad);
            color: white;
            padding: 4px 8px;
            border-radius: 6px;
            font-weight: 600;
            display: inline-block;
            min-width: 35px;
        }

        .weekend-cell {
            background: rgba(128, 128, 128, 0.2);
            color: #888888;
        }

        .date-header {
            writing-mode: vertical-rl;
            text-orientation: mixed;
            min-width: 30px;
            max-width: 35px;
        }

        @media (max-width: 1024px) {
            .employees-grid.five-employees {
                grid-template-columns: repeat(2, 1fr);
            }
            
            .employees-grid.five-employees .employee-card:nth-child(4),
            .employees-grid.five-employees .employee-card:nth-child(5) {
                grid-column: span 1;
                margin: 0;
            }
        }

        @media (max-width: 768px) {
            .container {
                padding: 15px;
            }
            
            .header h1 {
                font-size: 2rem;
            }
            
            .employees-grid,
            .employees-grid.five-employees {
                grid-template-columns: 1fr;
                gap: 20px;
            }
            
            .employee-card {
                padding: 20px;
                max-width: none;
            }
            
            .employees-grid.five-employees .employee-card:nth-child(4),
            .employees-grid.five-employees .employee-card:nth-child(5) {
                grid-column: span 1;
                margin: 0;
            }

            .attendance-table {
                font-size: 0.7rem;
            }
            
            .attendance-table th,
            .attendance-table td {
                padding: 8px 4px;
            }
            
            .date-header {
                font-size: 0.6rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>April 2025</h1>
            <p>Monitor employee work-from-office and work-from-home attendance patterns</p>
            
            <div class="upload-section">
                <div class="file-input-wrapper">
                    <input type="file" id="excelFile" class="file-input" accept=".xlsx,.xls">
                    <label for="excelFile" class="file-input-label">📁 Upload Excel File</label>
                </div>
                <div id="fileName" style="margin-top: 10px; color: #cccccc;"></div>
            </div>
        </div>

        <div id="loadingDiv" class="loading" style="display: none;">
            <div class="spinner"></div>
            <p>Processing attendance data...</p>
        </div>

        <div id="errorDiv" style="display: none;"></div>
        <div id="successDiv" style="display: none;"></div>

        <div id="employeesContainer"></div>
    </div>

    <script>
        let currentData = null;

        document.getElementById('excelFile').addEventListener('change', function(e) {
            const fileName = e.target.files[0]?.name;
            const fileNameDiv = document.getElementById('fileName');
            if (fileName) {
                fileNameDiv.textContent = `Selected: ${fileName}`;
                fileNameDiv.style.color = '#00f5ff';
                // Auto-process the file
                uploadFile();
            } else {
                fileNameDiv.textContent = '';
            }
        });

        function generateAvatar(name) {
            const colors = [
                'linear-gradient(45deg, #f093fb, #f5576c)', // Pink for Lokesh KN
                'linear-gradient(45deg, #667eea, #764ba2)', // Purple for Rethin Silvester  
                'linear-gradient(45deg, #43e97b, #38f9d7)', // Green for Salmon Jose
                'linear-gradient(45deg, #ff9a9e, #fecfef)', // Pink for Sowmya Sadhasivam
                'linear-gradient(45deg, #4facfe, #00f2fe)', // Blue for Suruchi Parashar
            ];
            
            const initials = name.split(' ').map(word => word.charAt(0)).join('').substring(0, 2).toUpperCase();
            
            // Assign specific colors based on name
            let colorIndex = 0;
            if (name.toLowerCase().includes('lokesh')) colorIndex = 0;
            else if (name.toLowerCase().includes('rethin')) colorIndex = 1;
            else if (name.toLowerCase().includes('salmon')) colorIndex = 2;
            else if (name.toLowerCase().includes('sowmya')) colorIndex = 3;
            else if (name.toLowerCase().includes('suruchi')) colorIndex = 4;
            else colorIndex = name.length % colors.length;
            
            return {
                initials: initials,
                background: colors[colorIndex]
            };
        }

        function createEmployeeCard(employee, index) {
            const avatar = generateAvatar(employee.name);
            const wfoCount = employee.summary.WFO || 0;
            const wfhCount = employee.summary.WFH || 0;
            const slCount = employee.summary.SL || 0;
            const plCount = employee.summary.PL || 0;
            const totalDays = employee.summary.Total_Days || 0;
            
            return `
                <div class="employee-card" onclick="toggleEmployeeCard(this)">
                    <div class="employee-header">
                        <div class="employee-avatar" style="background: ${avatar.background}">
                            ${avatar.initials}
                        </div>
                        <div class="employee-info">
                            <h3>${employee.name}</h3>
                            <p>${employee.department || 'IS'} • ${employee.team_manager || 'Shivakumar Jayabalan'}</p>
                        </div>
                    </div>
                    
                    <div class="status-indicators">
                        <div class="status-badge wfo-badge">
                            <div style="font-size: 1.2rem; font-weight: bold;">${wfoCount}</div>
                            <div style="font-size: 0.8rem;">WFO Days</div>
                        </div>
                        <div class="status-badge wfh-badge">
                            <div style="font-size: 1.2rem; font-weight: bold;">${wfhCount}</div>
                            <div style="font-size: 0.8rem;">WFH Days</div>
                        </div>
                    </div>
                    
                    <div class="leaves-summary">
                        <h4 style="color: #ffffff; margin-bottom: 10px;">📊 Detailed Summary</h4>
                        <div class="leaves-grid">
                            <div class="leave-item">
                                <div class="count">${slCount}</div>
                                <div class="label">Sick Leave</div>
                            </div>
                            <div class="leave-item">
                                <div class="count">${plCount}</div>
                                <div class="label">Personal Leave</div>
                            </div>
                            <div class="leave-item">
                                <div class="count">${totalDays}</div>
                                <div class="label">Total Working Days</div>
                            </div>
                            <div class="leave-item">
                                <div class="count">${Math.round((wfoCount / (wfoCount + wfhCount)) * 100) || 0}%</div>
                                <div class="label">Office Attendance</div>
                            </div>
                        </div>
                        
                        <div style="margin-top: 15px; padding: 10px; background: rgba(255, 255, 255, 0.1); border-radius: 8px; color: #ffffff;">
                            <strong>ID:</strong> ${employee.person_id || 'N/A'}<br>
                            <strong>Shift:</strong> ${employee.shift_timings || 'Standard'}
                        </div>
                    </div>
                </div>
            `;
        }

        function toggleEmployeeCard(card) {
            // Close other expanded cards
            document.querySelectorAll('.employee-card.expanded').forEach(otherCard => {
                if (otherCard !== card) {
                    otherCard.classList.remove('expanded');
                }
            });
            
            // Toggle current card
            card.classList.toggle('expanded');
        }

        function displayEmployees(data) {
            currentData = data;
            const container = document.getElementById('employeesContainer');
            let html = '';
            
            // Sort sheet names by month in descending order
            const sortedSheetNames = Object.keys(data).sort((a, b) => {
                // Extract month-year from sheet names for comparison
                const getMonthYear = (sheetName) => {
                    const cleaned = sheetName.replace(/^App Admin\s*/i, '').replace(/\s*-\s*\d+\s*Employees?$/i, '').trim();
                    // Handle different formats: "April", "April 2025", "April-2025", etc.
                    const parts = cleaned.split(/[\s-]+/);
                    const month = parts[0];
                    const year = parts[1] || new Date().getFullYear(); // Default to current year if not specified
                    
                    // Convert month name to number for sorting
                    const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 
                                      'July', 'August', 'September', 'October', 'November', 'December'];
                    const monthNum = monthNames.findIndex(m => m.toLowerCase().startsWith(month.toLowerCase()));
                    
                    return { year: parseInt(year), month: monthNum !== -1 ? monthNum : 0 };
                };
                
                const dateA = getMonthYear(a);
                const dateB = getMonthYear(b);
                
                // Sort by year descending, then by month descending
                if (dateA.year !== dateB.year) {
                    return dateB.year - dateA.year;
                }
                return dateB.month - dateA.month;
            });
            
            sortedSheetNames.forEach(sheetName => {
                const sheetData = data[sheetName];
                if (sheetData.employees && sheetData.employees.length > 0) {
                    const employeeCount = sheetData.employees.length;
                    const gridClass = employeeCount === 5 ? 'employees-grid five-employees' : 'employees-grid';
                    
                    // Extract and format month-year from sheet name
                    const cleanTitle = sheetName.replace(/^App Admin\s*/i, '').replace(/\s*-\s*\d+\s*Employees?$/i, '').trim() || sheetName;
                    
                    // Format as Month-Year (e.g., "April" becomes "April-2025")
                    const formatMonthYear = (title) => {
                        const parts = title.split(/[\s-]+/);
                        const month = parts[0];
                        const year = parts[1] || new Date().getFullYear(); // Default to current year
                        return `${month}-${year}`;
                    };
                    
                    const formattedTitle = formatMonthYear(cleanTitle);
                    
                    html += `
                        <div class="employees-section">
                            <h2 class="section-title">
                                📅 ${formattedTitle}
                            </h2>
                            <div class="${gridClass}">
                                ${sheetData.employees.map((employee, index) => createEmployeeCard(employee, index)).join('')}
                            </div>
                        </div>
                    `;
                    });
            });
            
            // Add monthly detail view with same sorting
            html += createMonthlyDetailView(data, sortedSheetNames);
            
            container.innerHTML = html;
        }

        function createMonthlyDetailView(data, sortedSheetNames = null) {
            let html = '<div class="monthly-detail">';
            
            const sheetNames = sortedSheetNames || Object.keys(data);
            
            sheetNames.forEach(sheetName => {
                const sheetData = data[sheetName];
                if (sheetData.employees && sheetData.employees.length > 0) {
                    html += `
                        <h2>📊 ${sheetName} - Detailed Attendance</h2>
                        <div style="overflow-x: auto;">
                            <table class="attendance-table">
                                <thead>
                                    <tr>
                                        <th style="min-width: 150px;">Employee</th>
                                        ${sheetData.dates.map((date, index) => 
                                            `<th class="date-header">${date.date}<br><span style="font-size: 0.7em;">${date.day}</span></th>`
                                        ).join('')}
                                        <th>WFO</th>
                                        <th>WFH</th>
                                        <th>SL</th>
                                        <th>PL</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${sheetData.employees.map(employee => {
                                        return `
                                            <tr>
                                                <td class="employee-name-cell">${employee.name}</td>
                                                ${sheetData.dates.map((date, dateIndex) => {
                                                    const status = employee.attendance[dateIndex] || '';
                                                    const isWeekend = date.day.toLowerCase() === 'saturday' || date.day.toLowerCase() === 'sunday';
                                                    const cellClass = isWeekend ? 'weekend-cell' : '';
                                                    
                                                    let statusHtml = '';
                                                    if (status) {
                                                        const statusClass = `status-${status.toLowerCase()}`;
                                                        statusHtml = `<span class="${statusClass}">${status}</span>`;
                                                    } else if (isWeekend) {
                                                        statusHtml = '<span style="color: #666;">—</span>';
                                                    }
                                                    
                                                    return `<td class="${cellClass}">${statusHtml}</td>`;
                                                }).join('')}
                                                <td><strong>${employee.summary.WFO || 0}</strong></td>
                                                <td><strong>${employee.summary.WFH || 0}</strong></td>
                                                <td><strong>${employee.summary.SL || 0}</strong></td>
                                                <td><strong>${employee.summary.PL || 0}</strong></td>
                                            </tr>
                                        `;
                                    }).join('')}
                                </tbody>
                            </table>
                        </div>
                    `;
                }
            });
            
            html += '</div>';
            return html;
        }

        function showMessage(message, type) {
            const errorDiv = document.getElementById('errorDiv');
            const successDiv = document.getElementById('successDiv');
            
            if (type === 'error') {
                errorDiv.innerHTML = `<div class="error">${message}</div>`;
                errorDiv.style.display = 'block';
                successDiv.style.display = 'none';
            } else {
                successDiv.innerHTML = `<div class="success">${message}</div>`;
                successDiv.style.display = 'block';
                errorDiv.style.display = 'none';
            }
            
            setTimeout(() => {
                errorDiv.style.display = 'none';
                successDiv.style.display = 'none';
            }, 5000);
        }

        async function uploadFile() {
            const fileInput = document.getElementById('excelFile');
            const file = fileInput.files[0];
            
            if (!file) {
                showMessage('Please select an Excel file first.', 'error');
                return;
            }
            
            const loadingDiv = document.getElementById('loadingDiv');
            
            loadingDiv.style.display = 'block';
            
            const formData = new FormData();
            formData.append('file', file);
            
            try {
                const response = await fetch('/upload', {
                    method: 'POST',
                    body: formData
                });
                
                const result = await response.json();
                
                if (result.success) {
                    displayEmployees(result.data);
                    showMessage(`✅ ${result.message}`, 'success');
                } else {
                    showMessage(`❌ ${result.error}`, 'error');
                }
            } catch (error) {
                showMessage(`❌ Error uploading file: ${error.message}`, 'error');
            } finally {
                loadingDiv.style.display = 'none';
            }
        }

        // Add keyboard support
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                document.querySelectorAll('.employee-card.expanded').forEach(card => {
                    card.classList.remove('expanded');
                });
            }
        });
    </script>
</body>
</html>
